# -*- coding: utf-8 -*-
"""preper.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Q6t35RWp2cd1ca-ag0idRlhXX-2P8F5J
"""

import torch.nn.functional as F
import torch_geometric
from torch_geometric.data import Data as dataa
import torch
def merge_node_features(nodes_blktype,fin,fout,in_blks,out_blks,vin_blks,vout_blks)
  node_ff=[]
  for i in range(len(edges)):
    nodes_blktype[i] = torch.tensor(nodes_blktype[i])
    fin[i] = torch.tensor(fin[i])
    fout[i] = torch.tensor(fout[i])
    in_blks[i] = torch.tensor(in_blks[i])
    out_blks[i] = torch.tensor(out_blks[i])
    vin_blks[i] = torch.tensor(vin_blks[i])
    vout_blks[i] = torch.tensor(vout_blks[i])
    node_ff.append(torch.stack((nodes_blktype[i].view(-1), fin[i],fout[i], in_blks[i] ,out_blks[i],vin_blks[i] ,vout_blks[i]),dim=0))
  return node_ff

def create_dataset(node_f,edges,edge_f,routability)

  dataset = []
  for i in range(len(edges)):
    edges[i]=torch.tensor(edges[i], dtype=torch.int64).T
    edge_f[i]=torch.tensor(edge_f[i]).view(7,-1).T
    routability[i] = torch.tensor([routability[i]])
    dataset.append(dataa(
    x=node_ff[i].T # remove the keyword arguments here
    ,edge_index=edges[i]
    ,edge_attr=edges_f[i]
    ,y=routability[i]))
  return dataset

# dataset=create_dataset(node_f,edges,edge_f,routability)
# batch = torch_geometric.data.Batch().from_data_list(dataset)
# print("Number of graphs:",batch.num_graphs)
# print("Graph at index 0:",batch[0])
# dataset.transform = T.NormalizeFeatures()